REPORT ZMAR_ALV.

DATA : it_makt TYPE STANDARD TABLE OF makt.
DATA v_matnr TYPE matnr.



*DATA o_alv TYPE REF TO CL_SALV_TABLE.
*DATA o_alv1 TYPE REF TO CL_SALV_TABLE.
SELECT-OPTIONS s_matnr FOR v_matnr.
START-OF-SELECTION.
PERFORM get_data.



END-OF-SELECTION.
PERFORM display.
*&---------------------------------------------------------------------*
*& Form get_data
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM get_data .
SELECT * FROM makt INTO TABLE it_makt WHERE matnr In s_matnr.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form display
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display .
CL_SALV_TABLE=>factory(
  IMPORTING
    r_salv_table   =   DATA(o_alv)                      " Basis Class Simple ALV Tables
  CHANGING
    t_table        = it_makt
).
*CATCH cx_salv_msg. " ALV: General Error Class with Message
o_alv->set_screen_status(
  report        = 'ZDEMO_ALV'
  pfstatus      = 'SALV_TABLE_STANDARD'
*  set_functions = cl_salv_model_base=>c_functions_none
).

*   Calling method to set the PF-Status
    o_alv->set_screen_status(
      pfstatus      =  'SALV_STANDARD'
      report        =  'SALV_DEMO_TABLE_SELECTIONS'
      set_functions = o_alv->c_functions_all ).

DATA: lo_layout  TYPE REF TO cl_salv_layout,
          lf_variant TYPE slis_vari,
          ls_key    TYPE salv_s_layout_key.
*
*   get layout object
    lo_layout = o_alv->get_layout( ).
*
*   set Layout save restriction
*   1. Set Layout Key .. Unique key identifies the Differenet ALVs
    ls_key-report = sy-repid.
    lo_layout->set_key( ls_key ).
*   2. Remove Save layout the restriction.
    lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).
*
*   set initial Layout
    lf_variant = 'DEFAULT'.
    lo_layout->set_initial_layout( lf_variant ).

  DATA: lo_header  TYPE REF TO cl_salv_form_layout_grid,
          lo_h_label TYPE REF TO cl_salv_form_label,
          lo_h_flow  TYPE REF TO cl_salv_form_layout_flow.
*
*   header object
    CREATE OBJECT lo_header.
*
*   To create a Lable or Flow we have to specify the target
*     row and column number where we need to set up the output
*     text.
*
*   information in Bold
    lo_h_label = lo_header->create_label( row = 1 column = 1 ).
    lo_h_label->set_text( 'Header in Bold' ).
*
*   information in tabular format
    lo_h_flow = lo_header->create_flow( row = 2  column = 1 ).
    lo_h_flow->create_text( text = 'This is text of flow' ).
*
    lo_h_flow = lo_header->create_flow( row = 3  column = 1 ).
    lo_h_flow->create_text( text = 'Number of Records in the output' ).
*
    lo_h_flow = lo_header->create_flow( row = 3  column = 2 ).
    lo_h_flow->create_text( text = 20 ).
*
*   set the top of list using the header for Online.
    o_alv->set_top_of_list( lo_header ).
*
*   set the top of list using the header for Print.
    o_alv->set_top_of_list_print( lo_header ).

    DATA: lo_footer  TYPE REF TO cl_salv_form_layout_grid,
          lo_f_label TYPE REF TO cl_salv_form_label,
          lo_f_flow  TYPE REF TO cl_salv_form_layout_flow.
*
*   footer object
    CREATE OBJECT lo_footer.
*
*   information in bold
    lo_f_label = lo_footer->create_label( row = 1 column = 1 ).
    lo_f_label->set_text( 'Footer .. here it goes' ).
*
*   tabular information
    lo_f_flow = lo_footer->create_flow( row = 2  column = 1 ).
    lo_f_flow->create_text( text = 'This is text of flow in footer' ).
*
    lo_f_flow = lo_footer->create_flow( row = 3  column = 1 ).
    lo_f_flow->create_text( text = 'Footer number' ).
*
    lo_f_flow = lo_footer->create_flow( row = 3  column = 2 ).
    lo_f_flow->create_text( text = 1 ).
*
*   Online footer
    o_alv->set_end_of_list( lo_footer ).
*
*   Footer in print
    o_alv->set_end_of_list_print( lo_footer ).


    DATA: lo_display TYPE REF TO cl_salv_display_settings.
*
*   get display object
    lo_display = o_alv->get_display_settings( ).
*
*   set ZEBRA pattern
    lo_display->set_striped_pattern( 'X' ).
*
*   Title to ALV
    lo_display->set_list_header( 'ALV Test for Display Settings' ).




    DATA: lo_cols TYPE REF TO cl_salv_columns.
    lo_cols = o_alv->get_columns( ).
*
*   set the Column optimization
    lo_cols->set_optimize( 'X' ).
*
*...Process individual columns
    DATA: lo_column TYPE REF TO cl_salv_column.
*
*   Change the properties of the Columns KUNNR
    TRY.
        lo_column = lo_cols->get_column( 'KUNNR' ).
        lo_column->set_long_text( 'Sold-To Party' ).
        lo_column->set_medium_text( 'Sold-To Party' ).
        lo_column->set_short_text( 'Sold-To' ).
        lo_column->set_output_length( 10 ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.


*     DATA: lo_cols_tab TYPE REF TO cl_salv_columns_table,
*          lo_col_tab  TYPE REF TO cl_salv_column_table.
**
**   get Columns object
*    lo_cols_tab = o_alv->get_columns( ).
**
**   Get VBELN column
*    TRY.
*        lo_col_tab ?= lo_cols_tab->get_column( 'VBELN' ).
*      CATCH cx_salv_not_found.
*    ENDTRY.
**
**   Set the HotSpot for VBELN Column
*    TRY.
*        CALL METHOD lo_col_tab->set_cell_type
*          EXPORTING
*            value = if_salv_c_cell_type=>hotspot.
*        .
*      CATCH cx_salv_data_error .
*    ENDTRY.
**
**...Events
*    DATA: lo_events TYPE REF TO cl_salv_events_table.
**
**   all events
*    lo_events = o_alv->get_event( ).
**
**   event handler
*    SET HANDLER o_report->on_link_click FOR lo_events.
**
*                      "set_hotspot_vbeln
**
** Handles the UI on the VBELN (HotSpot)
*  METHOD on_link_click.
**
*    DATA: la_vbak TYPE ty_vbak.
**
**   Get the Sales Order number from the table
*    READ TABLE lo_report->t_vbak INTO la_vbak INDEX row.
*    IF la_vbak-vbeln IS NOT INITIAL.
*      MESSAGE i398(00) WITH 'You have selected' la_vbak-vbeln.
*    ENDIF.



*    DATA: lo_cols_tab TYPE REF TO cl_salv_columns_table,
*          lo_col_tab  TYPE REF TO cl_salv_column_table.
*    DATA: ls_color TYPE lvc_s_colo.    " Colors strucutre
**
**   get Columns object
*    lo_cols_tab = o_alv->get_columns( ).
**
*    INCLUDE <color>.
**
**   Get ERDAT column & set the yellow Color fot it
*    TRY.
*        lo_col_tab ?= lo_cols_tab->get_column( 'ERDAT' ).
*        ls_color-col = col_total.
*        lo_col_tab->set_color( ls_color ).
*      CATCH cx_salv_not_found.
*    ENDTRY.
**
**.......Color for Specific Cell & Rows.................
**   Applying color on the 3rd Row and Column AUART
**   Applying color on the Entire 5th Row
**
*    DATA: lt_s_color TYPE lvc_t_scol,
*          ls_s_color TYPE lvc_s_scol,
*          la_makt    LIKE LINE OF it_makt,
*          l_count    TYPE i.
**
*    LOOP AT it_makt INTO la_makt.
*      l_count = l_count + 1.
*      CASE l_count.
**       Apply RED color to the AUART Cell of the 3rd Row
*        WHEN 3.
*          ls_s_color-fname     = 'AUART'.
*          ls_s_color-color-col = col_negative.
*          ls_s_color-color-int = 0.
*          ls_s_color-color-inv = 0.
*          APPEND ls_s_color TO lt_s_color.
*          CLEAR  ls_s_color.
**
**       Apply GREEN color to the entire row # 5
**         For entire row, we don't pass the Fieldname
*        WHEN 5.
*          ls_s_color-color-col = col_positive.
*          ls_s_color-color-int = 0.
*          ls_s_color-color-inv = 0.
*          APPEND ls_s_color TO lt_s_color.
*          CLEAR  ls_s_color.
*      ENDCASE.
**     Modify that data back to the output table
*      it_makt-t_color = lt_s_color.
*      MODIFY it_makt FROM it_makt.
*      CLEAR  it_makt.
*      CLEAR  lt_s_color.
*    ENDLOOP.
**
**   We will set this COLOR table field name of the internal table to
**   COLUMNS tab reference for the specific colors
*    TRY.
*        lo_cols_tab->set_color_column( 'T_COLOR' ).
*      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
*    ENDTRY.


*...Get all the Columns
*    DATA: lo_cols TYPE REF TO cl_salv_columns.
    lo_cols = o_alv->get_columns( ).
*
*   set the Column optimization
    lo_cols->set_optimize( 'X' ).
*
*...Process individual columns
*    DATA: lo_column TYPE REF TO cl_salv_column.
*
*   Change the properties of the Columns MATNR



        lo_column = lo_cols->get_column( 'MATNR' ).
        lo_column->set_long_text( 'Material_Number' ).
        lo_column->set_medium_text( 'Mat_Number' ).
        lo_column->set_short_text( 'Material' ).
        lo_column->set_output_length( 10 ).



DATA: lo_cols_tab TYPE REF TO cl_salv_columns_table,
       lo_col_tab  TYPE REF TO cl_salv_column_table.



DATA: ls_color TYPE lvc_s_colo.    " Colors strucutre
*
*   get Columns object
    lo_cols_tab = o_alv->get_columns( ).
*
    INCLUDE <color>.
*
*   Get ERDAT column & set the yellow Color fot it
    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'MAKTX' ).
        ls_color-col = col_total.
        lo_col_tab->set_color( ls_color ).
      CATCH cx_salv_not_found.
    ENDTRY.
*
*.......Color for Specific Cell & Rows.................
*   Applying color on the 3rd Row and Column AUART
*   Applying color on the Entire 5th Row
*
**
*    LOOP AT it_makt INTO la_makt.
*      l_count = l_count + 1.
*      CASE l_count.
**       Apply RED color to the AUART Cell of the 3rd Row
*        WHEN 3.
*          ls_s_color-fname     = 'AUART'.
*          ls_s_color-color-col = col_negative.
*          ls_s_color-color-int = 0.
*          ls_s_color-color-inv = 0.
*          APPEND ls_s_color TO lt_s_color.
*          CLEAR  ls_s_color.
**
**       Apply GREEN color to the entire row # 5
**         For entire row, we don't pass the Fieldname
*        WHEN 5.
*          ls_s_color-color-col = col_positive.
*          ls_s_color-color-int = 0.
*          ls_s_color-color-inv = 0.
*          APPEND ls_s_color TO lt_s_color.
*          CLEAR  ls_s_color.
*      ENDCASE.
**     Modify that data back to the output table
*      la_makt-t_color = lt_s_color.
*      MODIFY it_makt FROM la_makt.
*      CLEAR  la_makt.
*      CLEAR  lt_s_color.
*    ENDLOOP.
**
**   We will set this COLOR table field name of the internal table to
**   COLUMNS tab reference for the specific colors
*    TRY.
*        lo_cols_tab->set_color_column( 'T_COLOR' ).
*      CATCH cx_salv_data_error.                         "#EC NO_HANDLER
*    ENDTRY.
*    DISPLAY SETTINGS
*        DATA: lo_cols_tab TYPE REF TO cl_salv_columns_table,
*               DATA:lo_col_tab  TYPE REF TO cl_salv_column_table.
*
*   get Columns object
    lo_cols_tab = o_alv->get_columns( ).
*
*   Get MATNR column
    TRY.
        lo_col_tab ?= lo_cols_tab->get_column( 'MATNR' ).
      CATCH cx_salv_not_found.
    ENDTRY.
*
*   Set the HotSpot for VBELN Column
    TRY.
        CALL METHOD lo_col_tab->set_cell_type
          EXPORTING
            value = if_salv_c_cell_type=>hotspot.
        .
      CATCH cx_salv_data_error .
    ENDTRY.
*
*...Events
*    DATA: lo_events TYPE REF TO cl_salv_events_table.
*
*   all events
*    lo_events = o_alv->get_event( ).
*
*   event handler



*    SET HANDLER co_report->on_link_click FOR lo_events.
*
                  "set_hotspot_vbeln
*
* Handles the UI on the VBELN (HotSpot)
*
*    DATA: la_makt TYPE ty_makt.
*
*   Get the Sales Order number from the table
*    READ TABLE lo_report->t_makt INTO la_makt INDEX row.
*    IF la_makt-matnr IS NOT INITIAL.
*      MESSAGE i398(00) WITH 'You have selected' la_makt-matnr.
*    ENDIF.



o_alv->display( ).
ENDFORM.